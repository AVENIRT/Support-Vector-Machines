# -*- coding: utf-8 -*-
"""ASS WEEK2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cSitkhy90bRVo3qWhmMmh5GOWicmbOEI
"""

import pandas as pd
import numpy as np

# Data visualisation
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import classification_report, accuracy_score,confusion_matrix
#load diabetes dataset from OpenML
#https://www.openml.org/d/37
#Pima Indians Diabetes Database
from sklearn.datasets import fetch_openml
diabetes = fetch_openml(name='diabetes',  as_frame=True)

"""# New Section"""

## Check the data head
print(diabetes.frame.head)

## print data columns
print(diabetes.frame.columns)

## print stastiscal analysis of our data

print(diabetes.frame.describe())

### print details odf data to get more insight
print(diabetes.details)



"""This Python code loads the diabetes dataset from OpenML using fetch_openml() from scikit-learn. The data has 8 columns with datatype object and with no missing values. The describe () here return the description of our data frame. It sets the parameter as_frame=True to load the data as a panda DataFrame."""

## lets looks into data types

print(diabetes.frame.dtypes)

## Before going any further, check if there are  null values in the data 

print(diabetes.frame.isnull)

"""there is not null values in our data

We have only one categorical data which is class

Encoding ordinal variable
The only ordinal variable in our dataset is the class of education feature.
"""

### define our x imput and y output

x = diabetes.frame.drop('class', axis = 1)
y = diabetes.frame['class']

# Instantiate LabelEncoder
class_le= LabelEncoder()

# Apply LabelEncoder to the class column 
x= class_le.fit_transform(diabetes.frame['class'].values)

## print x
x

# Instantiate OneHotEncoder

ohe = OneHotEncoder()

# Apply OneHotEncoder to the class column 

ohe.fit_transform(diabetes.frame[['class']])[:5]

# The first 5 rows the class column for comparison

diabetes.frame['class'].head()

# class categories in OneHotEncoder 

ohe.categories_

"""Partion dataset into separate training and test datasets

"""

# Train test split 

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)

### print data shape
print("X_train shape: ", x_train.shape)
print("Y_train shape: ", y_train.shape)
print("X_test shape: ", x_test.shape)
print("Y_test shape: ", y_test.shape)

### Instantiate pipeline testing with SVM

svm_model = svm.SVC(decision_function_shape='ovo')
svm_model.fit(x_train, y_train)

#we predict the test set
predict_test = svm_model.predict(x_test)

#we predict the test set with rbf kermel and ovo decision
predict_test = svm_model.predict(x_test)
y_pred = svm_model.predict(x_test)
print("Accuracy score with rbf kernel and ovo decision_function_shape: ", accuracy_score(y_test, y_pred))

## predict decison test with poly kernel and ovo decision

svm_model = svm.SVC(kernel='poly', decision_function_shape='ovo')
svm_model.fit(x_train, y_train)
y_pred = svm_model.predict(x_test)
print("Accuracy score with poly kernel and ovo decision_function_shape: ", accuracy_score(y_test, y_pred))

### with linear kernel and ovo decision
svm_model = svm.SVC(kernel='linear', decision_function_shape='ovo')
svm_model.fit(x_train, y_train)
y_pred = svm_model.predict(x_test)
print("Accuracy score with linear kernel and ovo decision_function_shape: ", accuracy_score(y_test, y_pred))

# Fit SVM model with ovr decision function shape
svm_model = svm.SVC(kernel='linear', decision_function_shape='ovr')
svm_model.fit(x_train, y_train)
y_pred = svm_model.predict(x_test)
print("Accuracy score with linear kernel and ovr decision_function_shape: ", accuracy_score(y_test, y_pred))

#### fit with rbf

svm_model = svm.SVC(kernel='rbf', decision_function_shape='ovr')
svm_model.fit(x_train, y_train)
y_pred = svm_model.predict(x_test)
print("Accuracy score with rbf kernel and ovr decision_function_shape: ", accuracy_score(y_test, y_pred))

##### print training accuracy with svm model and ovo decision _function_shape

svm_model = svm.SVC(decision_function_shape='ovo')
svm_model.fit(x_train, y_train)

svm_model = svm.SVC(decision_function_shape='ovo')
svm_model.fit(x_train, y_train)

### we need predict train set

predict_train= svm_model.predict(x_train)

### we need predict test

predict_test=svm_model.predict(x_test)



from sklearn.metrics import classification_report,confusion_matrix

print('Training accuracy')

#we report the confusion matrix for the training set

print(confusion_matrix(y_train, predict_train))
#we report various accuracy statistics for the training set
print(classification_report(y_train, predict_train))

print('Testing accuracy')
#we report the confusion matrix for the test set
print(confusion_matrix(y_test,predict_test))
#we report various accuracy statistics for the test set
print(classification_report(y_test,predict_test))